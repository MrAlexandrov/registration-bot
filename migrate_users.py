#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤—É—é.

–°—Ç–∞—Ä–∞—è –ë–î: data/users.db
–ù–æ–≤–∞—è –ë–î: data/database.sqlite

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 migrate_users.py
"""

import re
import sqlite3
import sys
from datetime import datetime, UTC
from pathlib import Path


def parse_timestamp(timestamp_str):
    """
    –ü–∞—Ä—Å–∏—Ç timestamp –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î –≤ datetime –æ–±—ä–µ–∫—Ç.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã.
    """
    if not timestamp_str:
        return datetime.now(UTC)
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    formats = [
        "%Y-%m-%d %H:%M:%S.%f",  # 2024-01-15 10:30:45.123456
        "%Y-%m-%d %H:%M:%S",      # 2024-01-15 10:30:45
        "%Y-%m-%d",               # 2024-01-15
    ]
    
    for fmt in formats:
        try:
            dt = datetime.strptime(timestamp_str, fmt)
            # –î–æ–±–∞–≤–ª—è–µ–º timezone info
            return dt.replace(tzinfo=UTC)
        except ValueError:
            continue
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å timestamp: {timestamp_str}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
    return datetime.now(UTC)


def format_phone_db(value: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î.
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –∑–∞–º–µ–Ω—è–µ—Ç 8 –Ω–∞ 7 –≤ –Ω–∞—á–∞–ª–µ.
    """
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    phone = re.sub(r"\D", "", str(value))
    
    # –ó–∞–º–µ–Ω—è–µ–º 8 –Ω–∞ 7 –≤ –Ω–∞—á–∞–ª–µ
    if phone.startswith("8"):
        phone = "7" + phone[1:]
    
    return phone


def migrate_users(old_db_path, new_db_path, dry_run=False):
    """
    –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î –≤ –Ω–æ–≤—É—é.
    
    Args:
        old_db_path: –ü—É—Ç—å –∫ —Å—Ç–∞—Ä–æ–π –ë–î (users.db)
        new_db_path: –ü—É—Ç—å –∫ –Ω–æ–≤–æ–π –ë–î (database.sqlite)
        dry_run: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    if not Path(old_db_path).exists():
        print(f"‚ùå –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {old_db_path}")
        return False
    
    if not Path(new_db_path).exists():
        print(f"‚ùå –ù–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {new_db_path}")
        print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ë–î")
        return False
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ–±–µ–∏–º –ë–î
        old_conn = sqlite3.connect(old_db_path)
        old_conn.row_factory = sqlite3.Row
        old_cursor = old_conn.cursor()
        
        new_conn = sqlite3.connect(new_db_path)
        new_cursor = new_conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î
        old_cursor.execute("SELECT * FROM users")
        old_users = old_cursor.fetchall()
        
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å—Ç–∞—Ä–æ–π –ë–î: {len(old_users)}")
        
        if len(old_users) == 0:
            print("‚ö†Ô∏è  –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –µ—Å—Ç—å –≤ –Ω–æ–≤–æ–π –ë–î
        new_cursor.execute("SELECT telegram_id FROM users")
        existing_telegram_ids = {row[0] for row in new_cursor.fetchall()}
        
        print(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–∂–µ –≤ –Ω–æ–≤–æ–π –ë–î: {len(existing_telegram_ids)}")
        
        migrated_count = 0
        skipped_count = 0
        error_count = 0
        
        for old_user in old_users:
            telegram_id = old_user['user_id']
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –Ω–æ–≤–æ–π –ë–î
            if telegram_id in existing_telegram_ids:
                print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
                skipped_count += 1
                continue
            
            try:
                # –ü–∞—Ä—Å–∏–º timestamp
                created_at = parse_timestamp(old_user['timestamp'])
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                new_user_data = {
                    'telegram_id': telegram_id,
                    'state': 'registered',  # –í—Å–µ —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
                    'is_blocked': 0,
                    'created_at': created_at,
                    'updated_at': created_at,
                    'username': old_user['username'],
                    'telegram_sername': None,  # –ù–æ–≤–æ–µ –ø–æ–ª–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
                    'name': old_user['full_name'],
                    'birth_date': old_user['birth_date'],
                    'group': old_user['study_group'],
                    'phone': format_phone_db(old_user['phone_number']),
                    'expectations': old_user['expectations'],
                }
                
                if dry_run:
                    print(f"\nüîç [DRY RUN] –ë—É–¥–µ—Ç –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id}:")
                    print(f"   Username: {new_user_data['username']}")
                    print(f"   Full name: {new_user_data['telegram_sername']}")
                    print(f"   Birth date: {new_user_data['birth_date']}")
                    print(f"   Group: {new_user_data['group']}")
                    print(f"   Phone: {new_user_data['phone']}")
                else:
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–æ–≤—É—é –ë–î
                    new_cursor.execute("""
                        INSERT INTO users (
                            telegram_id, state, is_blocked, created_at, updated_at,
                            username, telegram_sername, name, birth_date, "group", phone, expectations
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """, (
                        new_user_data['telegram_id'],
                        new_user_data['state'],
                        new_user_data['is_blocked'],
                        new_user_data['created_at'],
                        new_user_data['updated_at'],
                        new_user_data['username'],
                        new_user_data['telegram_sername'],
                        new_user_data['name'],
                        new_user_data['birth_date'],
                        new_user_data['group'],
                        new_user_data['phone'],
                        new_user_data['expectations'],
                    ))
                    
                    print(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} (@{new_user_data['username']})")
                
                migrated_count += 1
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
                error_count += 1
                continue
        
        if not dry_run:
            new_conn.commit()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        old_conn.close()
        new_conn.close()
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        print("\n" + "="*60)
        print("üìä –ò–¢–û–ì–ò –ú–ò–ì–†–ê–¶–ò–ò:")
        print(f"   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å—Ç–∞—Ä–æ–π –ë–î: {len(old_users)}")
        print(f"   –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {migrated_count}")
        print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç): {skipped_count}")
        print(f"   –û—à–∏–±–æ–∫: {error_count}")
        print("="*60)
        
        if dry_run:
            print("\n‚ö†Ô∏è  –≠—Ç–æ –±—ã–ª –ø—Ä–æ–±–Ω—ã–π –∑–∞–ø—É—Å–∫ (dry run).")
            print("   –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ --dry-run")
        else:
            print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        return error_count == 0
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    print("="*60)
    print("üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
    print("="*60)
    
    # –ü—É—Ç–∏ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
    old_db_path = "data/users.db"
    new_db_path = "data/database.sqlite"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    dry_run = "--dry-run" in sys.argv
    
    if dry_run:
        print("\n‚ö†Ô∏è  –†–µ–∂–∏–º –ø—Ä–æ–±–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (dry run) - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    success = migrate_users(old_db_path, new_db_path, dry_run=dry_run)
    
    if success:
        sys.exit(0)
    else:
        sys.exit(1)


if __name__ == "__main__":
    main()