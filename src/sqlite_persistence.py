from telegram.ext import BasePersistence
import sqlite3
from typing import DefaultDict, Dict, Any, Optional
from collections import defaultdict
from settings import FIELDS

USER_FIELDS = {
    field["name"]: field["type"]
    for field in FIELDS
}

class SqliteUserPersistence(BasePersistence):
    """Persistence-–∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""

    def __init__(self, db_name="registration_data.db"):
        super().__init__(update_interval=1)
        self.db_name = db_name
        self.conn = sqlite3.connect(self.db_name, check_same_thread=False)
        self.cursor = self.conn.cursor()
        self._initialize_database()

    def _initialize_database(self):
        """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç, –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è."""
        columns = ["id INTEGER PRIMARY KEY", "telegram_id INTEGER UNIQUE", "state TEXT"]
        columns += [f"{field} {USER_FIELDS[field]}" for field in USER_FIELDS]

        self.cursor.execute(f"CREATE TABLE IF NOT EXISTS users ({', '.join(columns)})")
        self.conn.commit()

    async def get_user_data(self) -> DefaultDict[int, Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ user_data (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)."""
        self.cursor.execute("SELECT * FROM users")
        rows = self.cursor.fetchall()
        user_data = defaultdict(dict)

        for row in rows:
            user_id = row[1]
            user_data[user_id] = dict(zip(["state"] + list(USER_FIELDS.keys()), row[2:]))

        return user_data

    async def update_user_data(self, user_id: int, data: Dict[str, Any], state: Optional[str] = None) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
        existing_users = await self.get_user_data()

        if user_id not in existing_users:
            # ‚úÖ –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç –≤ –±–∞–∑–µ
            print(f"[DEBUG] Adding new user {user_id} to the database")
            self.cursor.execute("INSERT INTO users (telegram_id) VALUES (?)", (user_id,))
            self.conn.commit()

        if not data and state is None:
            print(f"[WARNING] Skipping update for user {user_id} because no data is provided.")
            return  # ‚ùó –ù–∏—á–µ–≥–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç

        # ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_fields = []
        values = []

        for key, value in data.items():
            if value is not None:  # ‚ùó –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                update_fields.append(f"{key} = ?")
                values.append(value)

        if state is not None:
            update_fields.append("state = ?")
            values.append(state)

        if not update_fields:
            print(f"[WARNING] No valid fields to update for user {user_id}")
            return

        values.append(user_id)

        sql_query = f"UPDATE users SET {', '.join(update_fields)} WHERE telegram_id = ?"
        print(f"[DEBUG] SQL EXECUTE: {sql_query} | VALUES: {values}")

        self.cursor.execute(sql_query, values)
        self.conn.commit()

    async def get_conversations(self, name: str) -> Dict[int, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è ConversationHandler."""
        
        self.cursor.execute("SELECT telegram_id, state FROM users WHERE state IS NOT NULL")
        result = {}
        for row in self.cursor.fetchall():
            telegram_id, state = row[0], row[1]

            # üö® –û—Ç–ª–∞–¥–∫–∞
            print(f"[DEBUG] get_conversations: user_id={telegram_id}, type={type(telegram_id)}, state={state}, type={type(state)}")

            if isinstance(state, str):  
                result[telegram_id] = state
            else:
                result[telegram_id] = str(state) if state is not None else None  

        print(f"[DEBUG] get_conversations: FINAL RESULT = {result}")
        return result

    async def update_conversation(self, name: str, key, new_state: Optional[str]) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        
        print(f"[DEBUG] update_conversation: BEFORE FIX key={key}, type={type(key)}, new_state={new_state}, type={type(new_state)}")

        if isinstance(key, tuple):
            key = key[0]

        print(f"[DEBUG] update_conversation: AFTER FIX key={key}, type={type(key)}")

        if new_state is None:
            self.cursor.execute("UPDATE users SET state = NULL WHERE telegram_id = ?", (key,))
        else:
            new_state_str = str(new_state)
            self.cursor.execute("UPDATE users SET state = ? WHERE telegram_id = ?", (new_state_str, key))

        self.conn.commit()

    async def drop_user_data(self, user_id: int) -> None:
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î."""
        self.cursor.execute("DELETE FROM users WHERE telegram_id = ?", (user_id,))
        self.conn.commit()

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã
    async def get_chat_data(self) -> DefaultDict[int, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–æ–≤ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω)."""
        return defaultdict(dict)

    async def update_chat_data(self, chat_id: int, data: Any) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–æ–≤ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω)."""
        pass

    async def drop_chat_data(self, chat_id: int) -> None:
        """–£–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–æ–≤ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω)."""
        pass

    async def get_bot_data(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω)."""
        return {}

    async def update_bot_data(self, data: Dict[str, Any]) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω)."""
        pass

    async def get_callback_data(self) -> Optional[Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç callback-–¥–∞–Ω–Ω—ã–µ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω)."""
        return None

    async def update_callback_data(self, data: Any) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç callback-–¥–∞–Ω–Ω—ã–µ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω)."""
        pass

    async def refresh_chat_data(self, chat_id: int, chat_data: Any) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–æ–≤ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω)."""
        pass

    async def refresh_user_data(self, user_id: int, user_data: Any) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω)."""
        pass

    async def refresh_bot_data(self, bot_data: Any) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω)."""
        pass

    def flush(self) -> None:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        if hasattr(self, "conn") and self.conn:
            print("[DEBUG] Flushing persistence and closing database connection.")
            self.conn.close()
