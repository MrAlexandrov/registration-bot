"""
Admin commands for managing users and permissions.
Only accessible to root and users with ADMIN permission.
"""

import logging

from telegram import Update
from telegram.ext import ContextTypes

from .permissions import Permission, permission_manager
from .user_storage import user_storage

logger = logging.getLogger(__name__)


class AdminCommands:
    """Handles admin commands for user and permission management."""

    def __init__(self):
        self.permission_manager = permission_manager

    async def handle_admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        Route admin commands to appropriate handlers.

        Commands:
        /grant_permission <user_id> <permission> - Grant permission to user
        /revoke_permission <user_id> <permission> - Revoke permission from user
        /list_permissions <user_id> - List user's permissions
        /list_users <permission> - List users with specific permission
        /register_staff_chat - Register current chat as staff chat
        /register_superuser_chat - Register current chat as superuser chat
        /my_permissions - Show your own permissions
        """
        user_id = update.effective_user.id

        # Extract command from message (handle both /command and /command@botname)
        command_text = update.message.text.split()[0].lower()
        # Remove bot username if present (e.g., /command@botname -> /command)
        command = command_text.split("@")[0]

        # Check if user has admin permission or is root
        if not (
            self.permission_manager.is_root(user_id)
            or self.permission_manager.has_permission(user_id, Permission.ADMIN)
        ):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
            return

        handlers = {
            "/grant_permission": self._grant_permission,
            "/revoke_permission": self._revoke_permission,
            "/list_permissions": self._list_permissions,
            "/list_users": self._list_users,
            "/register_staff_chat": self._register_staff_chat,
            "/register_superuser_chat": self._register_superuser_chat,
            "/my_permissions": self._my_permissions,
        }

        handler = handlers.get(command)
        if handler:
            await handler(update, context)
        else:
            await self._show_help(update, context)

    async def _grant_permission(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Grant permission to a user."""
        user_id = update.effective_user.id

        try:
            args = context.args
            if len(args) < 2:
                await update.message.reply_text(
                    "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant_permission <user_id> <permission>\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∞–≤–∞:\n"
                    "‚Ä¢ admin - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
                    "‚Ä¢ table_viewer - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü\n"
                    "‚Ä¢ message_sender - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                    "‚Ä¢ staff - —Å—Ç–∞—Ç—É—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞"
                )
                return

            target_user_id = int(args[0])
            permission_name = args[1].lower()

            # Validate permission
            try:
                permission = Permission(permission_name)
            except ValueError:
                await update.message.reply_text(
                    f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø—Ä–∞–≤–æ: {permission_name}\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∞–≤–∞: admin, table_viewer, message_sender, staff"
                )
                return

            # Grant permission
            success = self.permission_manager.grant_permission(target_user_id, permission, user_id)

            if success:
                await update.message.reply_text(f"‚úÖ –ü—Ä–∞–≤–æ '{permission_name}' –≤—ã–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
            else:
                await update.message.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ '{permission_name}'")

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
        except Exception as e:
            logger.error(f"Error granting permission: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–∞–≤: {e}")

    async def _revoke_permission(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Revoke permission from a user."""
        try:
            args = context.args
            if len(args) < 2:
                await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke_permission <user_id> <permission>")
                return

            target_user_id = int(args[0])
            permission_name = args[1].lower()

            # Validate permission
            try:
                permission = Permission(permission_name)
            except ValueError:
                await update.message.reply_text(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø—Ä–∞–≤–æ: {permission_name}")
                return

            # Revoke permission
            success = self.permission_manager.revoke_permission(target_user_id, permission)

            if success:
                await update.message.reply_text(
                    f"‚úÖ –ü—Ä–∞–≤–æ '{permission_name}' –æ—Ç–æ–∑–≤–∞–Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}"
                )
            else:
                await update.message.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ '{permission_name}'")

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
        except Exception as e:
            logger.error(f"Error revoking permission: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –ø—Ä–∞–≤: {e}")

    async def _list_permissions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """List permissions for a specific user."""
        try:
            args = context.args
            if len(args) < 1:
                await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /list_permissions <user_id>")
                return

            target_user_id = int(args[0])

            # Check if user exists
            user = user_storage.get_user(target_user_id)
            if not user:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return

            # Get permissions
            permissions = self.permission_manager.get_user_permissions(target_user_id)
            is_root = self.permission_manager.is_root(target_user_id)

            message = f"üë§ –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}:\n\n"

            if is_root:
                message += "üîë ROOT (—Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) - –≤—Å–µ –ø—Ä–∞–≤–∞\n"
            elif permissions:
                for perm in sorted(permissions):
                    message += f"‚Ä¢ {perm}\n"
            else:
                message += "–ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤"

            await update.message.reply_text(message)

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
        except Exception as e:
            logger.error(f"Error listing permissions: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def _list_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """List all users with a specific permission."""
        try:
            args = context.args
            if len(args) < 1:
                await update.message.reply_text(
                    "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /list_users <permission>\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∞–≤–∞: admin, table_viewer, message_sender, staff"
                )
                return

            permission_name = args[0].lower()

            # Validate permission
            try:
                permission = Permission(permission_name)
            except ValueError:
                await update.message.reply_text(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø—Ä–∞–≤–æ: {permission_name}")
                return

            # Get users with permission
            user_ids = self.permission_manager.list_users_with_permission(permission)

            if not user_ids:
                await update.message.reply_text(f"‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∞–≤–æ–º '{permission_name}'")
                return

            message = f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–∞–≤–æ–º '{permission_name}':\n\n"
            for uid in user_ids:
                is_root = self.permission_manager.is_root(uid)
                root_marker = " üîë (ROOT)" if is_root else ""
                message += f"‚Ä¢ {uid}{root_marker}\n"

            await update.message.reply_text(message)

        except Exception as e:
            logger.error(f"Error listing users: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def _register_staff_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Register current chat as staff chat."""
        user_id = update.effective_user.id

        # Only root can register chats
        if not self.permission_manager.is_root(user_id):
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ ROOT –º–æ–∂–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç—ã")
            return

        chat = update.effective_chat
        if chat.type == "private":
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö")
            return

        self.permission_manager.register_chat(chat.id, "staff", chat.title)

        await update.message.reply_text(
            f"‚úÖ –ß–∞—Ç '{chat.title}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —á–∞—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤\n\n"
            "–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç —Å—Ç–∞—Ç—É—Å staff"
        )

    async def _register_superuser_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Register current chat as superuser chat."""
        user_id = update.effective_user.id

        # Only root can register chats
        if not self.permission_manager.is_root(user_id):
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ ROOT –º–æ–∂–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç—ã")
            return

        chat = update.effective_chat
        if chat.type == "private":
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö")
            return

        self.permission_manager.register_chat(chat.id, "superuser", chat.title)

        await update.message.reply_text(
            f"‚úÖ –ß–∞—Ç '{chat.title}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —á–∞—Ç —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            "–í —ç—Ç–æ—Ç —á–∞—Ç –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö"
        )

    async def _my_permissions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show current user's permissions."""
        user_id = update.effective_user.id

        permissions = self.permission_manager.get_user_permissions(user_id)
        is_root = self.permission_manager.is_root(user_id)

        message = "üë§ –í–∞—à–∏ –ø—Ä–∞–≤–∞:\n\n"

        if is_root:
            message += "üîë ROOT (—Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) - –≤—Å–µ –ø—Ä–∞–≤–∞\n"
        elif permissions:
            for perm in sorted(permissions):
                message += f"‚Ä¢ {perm}\n"
        else:
            message += "–£ –≤–∞—Å –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤"

        await update.message.reply_text(message)

    async def _show_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show help for admin commands."""
        help_text = """
üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏:
/grant_permission <user_id> <permission> - –í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–æ
/revoke_permission <user_id> <permission> - –û—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–∞–≤–æ
/list_permissions <user_id> - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/list_users <permission> - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∞–≤–æ–º
/my_permissions - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞

üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ (—Ç–æ–ª—å–∫–æ ROOT):
/register_staff_chat - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤
/register_superuser_chat - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∞–≤–∞:
‚Ä¢ admin - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ø—Ä–∞–≤–∞–º–∏
‚Ä¢ table_viewer - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ message_sender - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ staff - —Å—Ç–∞—Ç—É—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
"""
        await update.message.reply_text(help_text)


# Global admin commands instance
admin_commands = AdminCommands()
