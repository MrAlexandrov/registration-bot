"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–µ—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç staff –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 25, 50, 75, 100 –∏ —Ç.–¥. —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
"""

import logging

from telegram import Bot

from src.messages import OPTION_WILL_DRIVE_YES

from .database import db
from .message_sender import message_sender
from .models import get_user_model
from .permissions import permission_manager

logger = logging.getLogger(__name__)


class MilestoneNotifier:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–µ—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.

    –£—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ:
    1. –û—Ç–≤–µ—Ç–∏–ª–∏ "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ! ü§©" –Ω–∞ –≤–æ–ø—Ä–æ—Å will_drive
    2. –ù–µ —è–≤–ª—è—é—Ç—Å—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏ (is_staff = 0)
    """

    # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –≤–µ—Ö–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    # –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ª—é–±—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ
    MILESTONES = [130, 140, 150, 160, 170, 180]

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è –≤–µ—Ö."""
        self.User = get_user_model()
        self._sent_milestones = set()  # –•—Ä–∞–Ω–∏—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–µ—Ö–∏

    def _get_participant_count(self) -> int:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.

        –£—á–∞—Å—Ç–Ω–∏–∫–∏ - —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ:
        - –û—Ç–≤–µ—Ç–∏–ª–∏ "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ! ü§©" –Ω–∞ –≤–æ–ø—Ä–æ—Å will_drive
        - –ù–µ —è–≤–ª—è—é—Ç—Å—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏ (is_staff = 0)

        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        """
        try:
            with db.get_session() as session:
                count = (
                    session.query(self.User)
                    .filter(self.User.will_drive == OPTION_WILL_DRIVE_YES, self.User.is_staff == 0)
                    .count()
                )
                return count
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            return 0

    def _calculate_milestone(self, count: int) -> int | None:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ª–∏ –∫–∞–∫–∞—è-–ª–∏–±–æ –≤–µ—Ö–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.

        Args:
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

        Returns:
            int | None: –ù–æ–º–µ—Ä –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ–π –≤–µ—Ö–∏ –∏–ª–∏ None –µ—Å–ª–∏ –≤–µ—Ö–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
        """
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤–µ—Ö–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã, –Ω–æ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
        reached_milestones = [m for m in self.MILESTONES if m <= count and m not in self._sent_milestones]

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∏–±–æ–ª—å—à—É—é –∏–∑ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã—Ö –≤–µ—Ö
        return max(reached_milestones) if reached_milestones else None

    def _format_milestone_message(self, milestone: int, current_count: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–µ—Ö–∏.

        Args:
            milestone: –ù–æ–º–µ—Ä –≤–µ—Ö–∏ (25, 50, 75, 100...)
            current_count: –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        emoji_map = {
            130: "üí´",
            140: "üåü",
            150: "üéÜ",
            160: "üöÄ",
            170: "üî•",
            180: "‚≠ê",
        }

        # –î–ª—è –≤–µ—Ö –±–æ–ª—å—à–µ 200 –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
        emoji = emoji_map.get(milestone, emoji_map.get(milestone % 200, "üéâ"))

        message = (
            f"{emoji} <b>–£—Ä–∞, —É—Ä–∞, —É—Ä–∞!</b> {emoji}\n\n" f"–£ –Ω–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ <b>{current_count}</b> —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!\n"
        )

        return message

    async def check_and_notify(self, bot: Bot) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–µ—Ö–∏.

        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram Bot

        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            current_count = self._get_participant_count()
            logger.debug(f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {current_count}")

            # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ö—É
            milestone = self._calculate_milestone(current_count)

            if milestone is None:
                logger.debug("–í–µ—Ö–∞ –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≤–µ—Ö–∏
            if milestone in self._sent_milestones:
                logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≤–µ—Ö–∏ {milestone} —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return False

            # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ staff
            staff_chat_id = permission_manager.get_chat_by_type("staff")

            if not staff_chat_id:
                logger.warning("–ß–∞—Ç staff –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return False

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_milestone_message(milestone, current_count)
            success = await message_sender.send_message(bot, staff_chat_id, message, parse_mode="HTML")

            if success:
                # –ü–æ–º–µ—á–∞–µ–º –≤–µ—Ö—É –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é
                self._sent_milestones.add(milestone)
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–µ—Ö–∏ {milestone} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                return True
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–µ—Ö–µ {milestone}")
                return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–µ—Ö–µ: {e}", exc_info=True)
            return False

    def reset_milestones(self) -> None:
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–µ—Ö.
        –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        """
        self._sent_milestones.clear()
        logger.info("–°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–µ—Ö —Å–±—Ä–æ—à–µ–Ω")

    def get_sent_milestones(self) -> set[int]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–µ—Ö.

        Returns:
            set[int]: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–µ—Ö
        """
        return self._sent_milestones.copy()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
milestone_notifier = MilestoneNotifier()
