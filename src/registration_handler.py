from telegram import (
    # Update, 
    ReplyKeyboardMarkup, 
    KeyboardButton, 
    ReplyKeyboardRemove, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton,
)
# import telegram
# from telegram.ext import CallbackContext
from user_storage import user_storage
from settings import FIELDS, POST_REGISTRATION_STATES, ADMIN_STATES, LABELS, ADMIN_IDS, TABLE_GETTERS
from telegram.constants import ParseMode
from utils import get_actual_table
from constants import *


class RegistrationFlow:
    def __init__(self, user_storage):
        self.user_storage = user_storage
        self.steps = [field[STATE] for field in FIELDS]
        self.states_config = {state[STATE]: state for state in POST_REGISTRATION_STATES}
        self.admin_states_config = {state[STATE]: state for state in ADMIN_STATES}

    async def handle_command(self, update, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ /start."""
        user_id = update.message.from_user.id
        user = self.user_storage.get_user(user_id)

        if not user:
            print(f"[DEBUG] –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            self.user_storage.create_user(user_id)
            await self.transition_state(update, context, self.steps[0])
        else:
            print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ '{user[STATE]}'")
            await self.transition_state(update, context, user[STATE])

    async def try_auto_collect_nickname(self, update, context, state, user_id):
        username = update.message.from_user.username
        if username:  # –ù–∏–∫ –µ—Å—Ç—å –≤ Telegram
            self.user_storage.update_user(user_id, USERNAME, username)
            await context.bot.send_message(chat_id=user_id, text=f"–¢–≤–æ–π –Ω–∏–∫ @{username} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
            next_state = self.get_next_state(state)
            await self.transition_state(update, context, next_state)
            return True
        return False

    async def try_skip_education_questions(self, update, context, state, user_id, user_data):
        if state == OTHER_EDUCATION:
            if user_data[EDUCATION_CHOICE] != OTHER_STUDY_PLACE:
                self.user_storage.update_user(user_id, OTHER_EDUCATION, NO)
                # await context.bot.send_message(chat_id=user_id, text="–î—Ä—É–≥–æ–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ")
                next_state = self.get_next_state(state)
                await self.transition_state(update, context, next_state)
                return True

        if state == STUDY_GROUP:
            if user_data[EDUCATION_CHOICE] == FINISHED or user_data[EDUCATION_CHOICE] == DO_NOT_STUDY:
                self.user_storage.update_user(user_id, STUDY_GROUP, NO)
                # await context.bot.send_message(chat_id=user_id, text="–£—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É –∑–∞–ø–æ–ª–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ")
                next_state = self.get_next_state(state)
                await self.transition_state(update, context, next_state)
                return True

        if state == RESCHEDULING_SESSION:
            if user_data[EDUCATION_CHOICE] == FINISHED or user_data[EDUCATION_CHOICE] == DO_NOT_STUDY:
                self.user_storage.update_user(user_id, RESCHEDULING_SESSION, NO)
                # await context.bot.send_message(chat_id=user_id, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –ø–µ—Ä–µ–Ω–æ—Å —Å–µ—Å—Å–∏–∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ")
                next_state = self.get_next_state(state)
                await self.transition_state(update, context, next_state)
                return True

        if state == RESCHEDULING_PRACTICE:
            if user_data[EDUCATION_CHOICE] == FINISHED or user_data[EDUCATION_CHOICE] == DO_NOT_STUDY:
                self.user_storage.update_user(user_id, RESCHEDULING_PRACTICE, NO)
                # await context.bot.send_message(chat_id=user_id, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –ø–µ—Ä–µ–Ω–æ—Å –ø—Ä–∞–∫—Ç–∏–∫–∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ")
                next_state = self.get_next_state(state)
                await self.transition_state(update, context, next_state)
                return True

        return False

    async def transition_state(self, update, context, state):
        user_id = update.message.from_user.id if update.message else update.callback_query.from_user.id
        user_data = self.user_storage.get_user(user_id)
        print(f"[DEBUG] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é '{state}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è
        config = self.get_config_by_state(state)
        if not config:
            if user_id in ADMIN_IDS or user_id:
                config = self.get_admin_config_by_state(state)
            else:
                print(f"[ERROR] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è '{state}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                await context.bot.send_message(
                    chat_id=user_id, 
                    text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò¢\n–ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π `/start` (–≤—Å–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —è –ø–æ–º–Ω—é), –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, –æ–±—Ä–∞—Ç–∏—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫ –ª—é–¥—è–º, –æ—Ç–≤–µ—á–∞—é—â–∏–º –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
                    parse_mode=ParseMode.MARKDOWN,
                )
                return

        # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–±–æ—Ä–∞ –Ω–∏–∫–Ω–µ–π–º–∞, –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–≥–æ —Å—Ä–∞–∑—É
        if state == USERNAME:
            if await self.try_auto_collect_nickname(update, context, state, user_id):
                return

        if state in {OTHER_EDUCATION, STUDY_GROUP, RESCHEDULING_SESSION, RESCHEDULING_PRACTICE}:
            if await self.try_skip_education_questions(update, context, state, user_id, user_data):
                return

        if state == WORK_PLACE:
            if user_data[WORK] == NO:
                self.user_storage.update_user(user_id, WORK_PLACE, user_data[WORK])
                # await context.bot.send_message(chat_id=user_id, text="–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã –∑–∞–ø–æ–ª–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ")
                next_state = self.get_next_state(state)
                await self.transition_state(update, context, next_state)
                return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.user_storage.update_state(user_id, state)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        message = self.get_state_message(config, user_id)

        actual_field_name = state.replace("edit_", "")
        if OPTIONS in config:
            selected_options = user_data.get(actual_field_name, "")
            selected_options = selected_options.split(", ") if selected_options else []
            reply_markup = self.create_inline_keyboard(
                config[OPTIONS],
                selected_options=selected_options,
                multi_select=config.get(MULTI_SELECT, False)
            )
        elif BUTTONS in config:
            buttons = config[BUTTONS]() if callable(config[BUTTONS]) else config[BUTTONS]

            if state == EDIT:
                user_nickname = user_data.get(USERNAME, "")

                # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫", –µ—Å–ª–∏ –Ω–∏–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                if user_nickname:
                    buttons = [button for button in buttons if button != LABELS[USERNAME]]

            if user_id in ADMIN_IDS or user_id in TABLE_GETTERS and state == REGISTERED:
                if user_id in ADMIN_IDS and SEND_MESSAGE_ALL_USERS not in buttons:
                    buttons.append(SEND_MESSAGE_ALL_USERS)
                if user_id in TABLE_GETTERS and GET_ACTUAL_TABLE not in buttons:
                    buttons.append(GET_ACTUAL_TABLE)

            reply_markup = ReplyKeyboardMarkup([[button] for button in buttons], resize_keyboard=True, one_time_keyboard=True)
        elif config.get(REQUEST_CONTACT):
            reply_markup = ReplyKeyboardMarkup(
                [[KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º –∏–∑ Telegram", request_contact=True)]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        else:
            reply_markup = ReplyKeyboardRemove()

        print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {message}")
        await context.bot.send_message(chat_id=user_id, text=message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    async def handle_input(self, update, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π."""
        user_id = update.message.from_user.id
        user = self.user_storage.get_user(user_id)
        # For user, that does not saved in db, if send some message
        if user is None:
            await context.bot.send_message(chat_id=user_id, text="–ò–∑–≤–∏–Ω–∏, –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ —è –Ω–µ –ø–æ–º–Ω—é —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø–æ–ª–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Ö –∑–∞–Ω–æ–≤–æ")
            await self.handle_command(update, context)
            return
        state = user[STATE]

        print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ '{state}'")

        if user_id in ADMIN_IDS:
            self.user_storage.update_state(user_id, state)
            config = self.get_admin_config_by_state(state)

            if state == ADMIN_SEND_MESSAGE:
                user_input = update.message.text
                if user_input == CANCEL:
                    await self.transition_state(update, context, REGISTERED)
                    return
                all_users_id = self.user_storage.get_all_users()
                print(f"all_users_id = {all_users_id}")
                for current_user_id in all_users_id:
                    try:
                        await context.bot.send_message(chat_id=current_user_id, text=update.message.text)
                    except:
                        print(f"[ERROR] cant sent message for user {current_user_id}")
                await context.bot.send_message(chat_id=user_id, text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(all_users_id)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
                print(f"[DEBUG] message {update.message.text} was send for {len(all_users_id)} users")
                await self.transition_state(update, context, REGISTERED)
                return

        config = self.get_config_by_state(state)
        if not config:
            print(f"[ERROR] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ '{state}'")
            await context.bot.send_message(
                chat_id=user_id, 
                text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò¢\n–ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π `/start` (–≤—Å–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —è –ø–æ–º–Ω—é), –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, –æ–±—Ä–∞—Ç–∏—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫ –ª—é–¥—è–º, –æ—Ç–≤–µ—á–∞—é—â–∏–º –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
                parse_mode=ParseMode.MARKDOWN,
            )
            return

        user_input = update.message.contact.phone_number if update.message.contact else update.message.text

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è (edit, registered)
        if BUTTONS in config:
            await self.process_action_input(update, context, state, user_input)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
        await self.process_data_input(update, context, state, user_input)

    async def process_action_input(self, update, context, state, user_input):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö registered –∏ edit."""
        user_id = update.message.from_user.id

        if state == REGISTERED:
            if user_input == CHANGE_DATA:
                print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'.")
                await self.transition_state(update, context, EDIT)
                return
            if user_id in ADMIN_IDS or user_id in TABLE_GETTERS:
                if user_id in ADMIN_IDS and user_input == SEND_MESSAGE_ALL_USERS:
                    await self.transition_state(update, context, ADMIN_SEND_MESSAGE)
                    return
                if user_id in TABLE_GETTERS and user_input == GET_ACTUAL_TABLE:
                    file_path = get_actual_table()
                    try:
                        await context.bot.send_document(chat_id=user_id, document=open(file_path, "rb"))
                        await update.message.reply_text("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    except Exception as e:
                        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e}")
                    return

        if state == ADMIN_SEND_MESSAGE:
            if user_input == CANCEL:
                await self.transition_state(update, context)
                return

        if state == EDIT:
            if user_input == CANCEL:
                print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
                await self.transition_state(update, context, REGISTERED)
                return

            field_config = self.get_config_by_label(user_input)
            if not field_config:
                print(f"[ERROR] –ü–æ–ª–µ '{user_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                await context.bot.send_message(chat_id=user_id, text="–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –ø–æ–ª—è üò¢\n–í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥—Ä—É–≥–æ–µ, –∏–ª–∏ –æ—Ç–º–µ–Ω–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
                return

            if field_config[STATE] == USERNAME:
                user_data = self.user_storage.get_user(user_id)
                if user_data[USERNAME]:
                    await context.bot.send_message(chat_id=user_id, text="–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±—Ä–∞–ª —Ç–≤–æ–π –Ω–∏–∫ –≤ Telegram, –µ—Å–ª–∏ —É —Ç–µ–±—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–º–µ–Ω—è–ª—Å—è –∞–∫–∫–∞—É–Ω—Ç, –Ω–∞–ø–∏—à–∏ –ª—é–¥—è–º, –æ—Ç–≤–µ—á–∞—é—â–∏–º –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –æ–Ω–∏ —Ä–µ—à–∞—Ç –≤–æ–ø—Ä–æ—Å")
                    return

            await self.transition_state(update, context, f"edit_{field_config[STATE]}")

    def apply_db_formatter(self, field_name, value):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ."""
        field_config = next((f for f in FIELDS if f[STATE] == field_name), None)
        db_formatter = field_config.get("db_formatter")
        return db_formatter(value) if db_formatter else value

    async def process_data_input(self, update, context, state, user_input):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º."""
        user_id = update.effective_user.id
        user_data = self.user_storage.get_user(user_id)

        # –£–±–∏—Ä–∞–µ–º edit_, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ñ–∏–≥ –≤ FIELDS
        actual_state = state.replace("edit_", "")
        field_config = next((f for f in FIELDS if f[STATE] == actual_state), None)

        if not field_config:
            print(f"[ERROR] –ü–æ–ª–µ '{actual_state}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await context.bot.send_message(
                chat_id=user_id, 
                text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò¢\n–ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π `/start` (–≤—Å–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —è –ø–æ–º–Ω—é), –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, –æ–±—Ä–∞—Ç–∏—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫ –ª—é–¥—è–º, –æ—Ç–≤–µ—á–∞—é—â–∏–º –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
                parse_mode=ParseMode.MARKDOWN,
            )
            return

        # –ï—Å–ª–∏ –ø–æ–ª–µ —Ç—Ä–µ–±—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if field_config.get(REQUEST_CONTACT) and update.message.contact:
            user_input = update.message.contact.phone_number

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if field_config.get(VALIDATOR) and not field_config[VALIDATOR](user_input):
            await context.bot.send_message(chat_id=user_id, text=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field_config['label']}. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        formatted_db_value = self.apply_db_formatter(actual_state, user_input)
        self.user_storage.update_user(user_id, actual_state, formatted_db_value)

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        next_state = self.get_next_state(state)
        await self.transition_state(update, context, next_state)

    def get_next_state(self, state):
        actual_state = state.replace("edit_", "")

        if state.startswith("edit_"):
            return REGISTERED  # –í–æ–∑–≤—Ä–∞—Ç –∫ registered –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        if actual_state in self.steps:
            current_index = self.steps.index(actual_state)
            if current_index < len(self.steps) - 1:
                return self.steps[current_index + 1]

        return REGISTERED

    def get_config_by_state(self, state):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏."""
        print(f"[DEBUG] –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è '{state}'")

        if state.startswith("edit_"):
            original_field_name = state.replace("edit_", "")
            config = next((f for f in FIELDS if f[STATE] == original_field_name), None)
            if config:
                print(f"[DEBUG] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è edit —Å–æ—Å—Ç–æ—è–Ω–∏—è: {config}")
            else:
                print(f"[ERROR] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è edit —Å–æ—Å—Ç–æ—è–Ω–∏—è '{state}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return config

        config = next((f for f in FIELDS if f[STATE] == state), None) or self.states_config.get(state)
        if config:
            print(f"[DEBUG] –ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è '{state}': {config}")
        else:
            print(f"[ERROR] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è '{state}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return config

    def get_admin_config_by_state(self, state):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏."""
        print(f"[DEBUG] –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è '{state}'")

        config = next((f for f in ADMIN_STATES if f[STATE] == state), None) or self.admin_states_config.get(state)

        if config:
            print(f"[DEBUG] –ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è '{state}': {config}")
        else:
            print(f"[ERROR] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è '{state}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return config

    def get_config_by_label(self, label):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª—è –ø–æ –µ–≥–æ label (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏)."""
        return next((f for f in FIELDS if f[LABEL] == label), None)

    def get_registered_message(self, config, user_id):
        if config[STATE] != REGISTERED:
            print(f"[ERROR] get_registered_message should use only for register state, current state = {config[STATE]}") 
        user = self.user_storage.get_user(user_id)
        print(f"[DEBUG] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã: {user}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            field[STATE]: field[DISPLAY_FORMATTER](user.get(field[STATE], "–ù–µ —É–∫–∞–∑–∞–Ω–æ"))
            if DISPLAY_FORMATTER in field and callable(field[DISPLAY_FORMATTER])
            else user.get(field[STATE], "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            for field in FIELDS
        }

        print(f"[DEBUG] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏: {user_data}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
        return config[MESSAGE].format(**user_data)

    def get_state_message(self, config, user_id):
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤–∫–ª—é—á–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        print(f"[DEBUG] –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è '{config[STATE]}'")

        if config[STATE] == REGISTERED:
            return self.get_registered_message(config, user_id)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        return config[MESSAGE]

    async def clear_inline_keyboard(self, update):
        """–£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –æ—Å—Ç–∞–≤–ª—è—è —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è."""
        if update.callback_query:
            await update.callback_query.edit_message_reply_markup(reply_markup=None)

    async def handle_inline_query(self, update, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏."""
        query = update.callback_query
        await query.answer()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        callback_data = query.data.split('|')
        action = callback_data[0]  # select –∏–ª–∏ done
        option = callback_data[1] if len(callback_data) > 1 else None

        user_id = query.from_user.id
        user = self.user_storage.get_user(user_id)
        state = user[STATE]

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ edit_* –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è –ø–æ–ª—è
        actual_field_name = state.replace("edit_", "")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–±–æ—Ä –æ–¥–∏–Ω–æ—á–Ω—ã–º –∏–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º
        field_config = self.get_config_by_state(actual_field_name)
        is_multi_select = field_config.get(MULTI_SELECT, False)

        selected_options = user.get(actual_field_name, "").split(", ") if user.get(actual_field_name) else []

        if action == "select":
            if is_multi_select:
                if option in selected_options:
                    selected_options.remove(option)  # –£–±–∏—Ä–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ
                else:
                    selected_options.append(option)  # –î–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
            else:
                selected_options = [option]  # –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
                # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                await self.clear_inline_keyboard(update)

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ
                self.user_storage.update_user(user_id, actual_field_name, ", ".join(selected_options))

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                next_state = self.get_next_state(state)
                print(f"[DEBUG] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é: {next_state}")

                # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
                await self.transition_state(update, context, next_state)
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ
            self.user_storage.update_user(user_id, actual_field_name, ", ".join(selected_options))

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
            buttons = [
                InlineKeyboardButton(
                    f"‚úÖ {opt}" if opt in selected_options else opt,
                    callback_data=f"select|{opt}"
                )
                for opt in field_config[OPTIONS]
            ]

            # –ö–Ω–æ–ø–∫–∏ –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
            buttons = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
            buttons.append([InlineKeyboardButton(DONE, callback_data="done")])
            reply_markup = InlineKeyboardMarkup(buttons)

            if query.message.reply_markup != reply_markup:
                await query.edit_message_reply_markup(reply_markup=reply_markup)
            else:
                print("[DEBUG] Reply markup is not modified, skipping edit_message_reply_markup call")

        elif action == "done":
            if not selected_options:
                await context.bot.send_message(chat_id=user_id, text="–ù—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –≤—ã–±—Ä–∞—Ç—å!")
                return
            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await self.clear_inline_keyboard(update)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            next_state = self.get_next_state(state)
            print(f"[DEBUG] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é: {next_state}")

            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            await self.transition_state(update, context, next_state)

    def create_inline_keyboard(self, options, selected_options=None, multi_select=False):
        selected_options = selected_options or []
        buttons = [
            InlineKeyboardButton(
                f"‚úÖ {opt}" if opt in selected_options else opt,
                callback_data=f"select|{opt}"
            )
            for opt in options
        ]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
        keyboard = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
        if multi_select:
            keyboard.append([InlineKeyboardButton(DONE, callback_data="done")])

        return InlineKeyboardMarkup(keyboard)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
registration_flow = RegistrationFlow(user_storage)
