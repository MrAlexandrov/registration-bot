"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è milestone_notifier.
"""

from unittest.mock import AsyncMock, MagicMock, patch

import pytest

from src.milestone_notifier import MilestoneNotifier


@pytest.fixture
def milestone_notifier():
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä MilestoneNotifier –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    notifier = MilestoneNotifier()
    notifier.reset_milestones()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    return notifier


@pytest.fixture
def mock_bot():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –±–æ—Ç–∞."""
    bot = MagicMock()
    bot.send_message = AsyncMock(return_value=True)
    return bot


class TestMilestoneNotifier:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ MilestoneNotifier."""

    def test_calculate_milestone_below_threshold(self, milestone_notifier):
        """–¢–µ—Å—Ç: –≤–µ—Ö–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ø—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ö–∏."""
        assert milestone_notifier._calculate_milestone(0) is None
        assert milestone_notifier._calculate_milestone(5) is None
        assert milestone_notifier._calculate_milestone(9) is None

    def test_calculate_milestone_at_threshold(self, milestone_notifier):
        """–¢–µ—Å—Ç: –≤–µ—Ö–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ø—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–∞–≤–Ω–æ–º –≤–µ—Ö–µ."""
        assert milestone_notifier._calculate_milestone(10) == 10
        assert milestone_notifier._calculate_milestone(25) == 25
        assert milestone_notifier._calculate_milestone(50) == 50
        assert milestone_notifier._calculate_milestone(100) == 100

    def test_calculate_milestone_between_milestones(self, milestone_notifier):
        """–¢–µ—Å—Ç: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª—å—à–∞—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞—è –≤–µ—Ö–∞."""
        # –ú–µ–∂–¥—É 10 –∏ 25 –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è 10
        assert milestone_notifier._calculate_milestone(11) == 10
        assert milestone_notifier._calculate_milestone(24) == 10

        # –ú–µ–∂–¥—É 25 –∏ 50 –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è 25
        assert milestone_notifier._calculate_milestone(26) == 25
        assert milestone_notifier._calculate_milestone(49) == 25

        # –ú–µ–∂–¥—É 50 –∏ 75 –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è 50
        assert milestone_notifier._calculate_milestone(51) == 50
        assert milestone_notifier._calculate_milestone(74) == 50

        # –ú–µ–∂–¥—É 100 –∏ 125 –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è 100
        assert milestone_notifier._calculate_milestone(101) == 100
        assert milestone_notifier._calculate_milestone(124) == 100

    def test_calculate_milestone_already_sent(self, milestone_notifier):
        """–¢–µ—Å—Ç: —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–µ—Ö–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è."""
        # –û—Ç–º–µ—á–∞–µ–º –≤–µ—Ö–∏ 10 –∏ 25 –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
        milestone_notifier._sent_milestones.add(10)
        milestone_notifier._sent_milestones.add(25)

        # –ü—Ä–∏ 26 —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –≤–µ—Ö–∏ 10 –∏ 25 —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è None
        assert milestone_notifier._calculate_milestone(26) is None

        # –ü—Ä–∏ 50 —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤–µ—Ö–∞ 50
        assert milestone_notifier._calculate_milestone(50) == 50

        # –û—Ç–º–µ—á–∞–µ–º –≤–µ—Ö—É 50 –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é
        milestone_notifier._sent_milestones.add(50)

        # –ü—Ä–∏ 51 —É—á–∞—Å—Ç–Ω–∏–∫–µ –≤—Å–µ –≤–µ—Ö–∏ –¥–æ 50 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è None
        assert milestone_notifier._calculate_milestone(51) is None

        # –ü—Ä–∏ 75 —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤–µ—Ö–∞ 75
        assert milestone_notifier._calculate_milestone(75) == 75

    def test_format_milestone_message(self, milestone_notifier):
        """–¢–µ—Å—Ç: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–µ—Ö–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."""
        message = milestone_notifier._format_milestone_message(25, 27)

        assert "27" in message
        assert "üéâ" in message

    def test_format_milestone_message_different_milestones(self, milestone_notifier):
        """–¢–µ—Å—Ç: —Ä–∞–∑–Ω—ã–µ –≤–µ—Ö–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–∞–∑–Ω—ã–µ —ç–º–æ–¥–∑–∏."""
        message_25 = milestone_notifier._format_milestone_message(25, 25)
        message_50 = milestone_notifier._format_milestone_message(50, 50)
        message_100 = milestone_notifier._format_milestone_message(100, 100)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
        assert "25" in message_25
        assert "50" in message_50
        assert "100" in message_100

    @pytest.mark.asyncio
    async def test_check_and_notify_no_milestone(self, milestone_notifier, mock_bot):
        """–¢–µ—Å—Ç: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –µ—Å–ª–∏ –≤–µ—Ö–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞."""
        with patch.object(milestone_notifier, "_get_participant_count", return_value=5):
            result = await milestone_notifier.check_and_notify(mock_bot)

            assert result is False
            mock_bot.send_message.assert_not_called()

    @pytest.mark.asyncio
    async def test_check_and_notify_no_staff_chat(self, milestone_notifier, mock_bot):
        """–¢–µ—Å—Ç: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –µ—Å–ª–∏ —á–∞—Ç staff –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω."""
        with patch.object(milestone_notifier, "_get_participant_count", return_value=10):
            with patch("src.milestone_notifier.permission_manager.get_chat_by_type", return_value=None):
                result = await milestone_notifier.check_and_notify(mock_bot)

                assert result is False
                mock_bot.send_message.assert_not_called()

    @pytest.mark.asyncio
    async def test_check_and_notify_milestone_reached(self, milestone_notifier, mock_bot):
        """–¢–µ—Å—Ç: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–µ—Ö–∏."""
        staff_chat_id = -1001234567890

        with patch.object(milestone_notifier, "_get_participant_count", return_value=10):
            with patch("src.milestone_notifier.permission_manager.get_chat_by_type", return_value=staff_chat_id):
                with patch("src.milestone_notifier.message_sender.send_message", new_callable=AsyncMock) as mock_send:
                    mock_send.return_value = True

                    result = await milestone_notifier.check_and_notify(mock_bot)

                    assert result is True
                    mock_send.assert_called_once()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ö–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
                    assert 10 in milestone_notifier.get_sent_milestones()

    @pytest.mark.asyncio
    async def test_check_and_notify_milestone_already_sent(self, milestone_notifier, mock_bot):
        """–¢–µ—Å—Ç: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–ª—è —Ç–æ–π –∂–µ –≤–µ—Ö–∏."""
        staff_chat_id = -1001234567890

        with patch.object(milestone_notifier, "_get_participant_count", return_value=10):
            with patch("src.milestone_notifier.permission_manager.get_chat_by_type", return_value=staff_chat_id):
                with patch("src.milestone_notifier.message_sender.send_message", new_callable=AsyncMock) as mock_send:
                    mock_send.return_value = True

                    # –ü–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
                    result1 = await milestone_notifier.check_and_notify(mock_bot)
                    assert result1 is True

                    # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è —Ç–æ–π –∂–µ –≤–µ—Ö–∏
                    result2 = await milestone_notifier.check_and_notify(mock_bot)
                    assert result2 is False

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ send_message –±—ã–ª –≤—ã–∑–≤–∞–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                    assert mock_send.call_count == 1

    @pytest.mark.asyncio
    async def test_check_and_notify_multiple_milestones(self, milestone_notifier, mock_bot):
        """–¢–µ—Å—Ç: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ö."""
        staff_chat_id = -1001234567890

        with patch("src.milestone_notifier.permission_manager.get_chat_by_type", return_value=staff_chat_id):
            with patch("src.milestone_notifier.message_sender.send_message", new_callable=AsyncMock) as mock_send:
                mock_send.return_value = True

                # –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –≤–µ—Ö–∞ 10
                with patch.object(milestone_notifier, "_get_participant_count", return_value=10):
                    result1 = await milestone_notifier.check_and_notify(mock_bot)
                    assert result1 is True

                # –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –≤–µ—Ö–∞ 25
                with patch.object(milestone_notifier, "_get_participant_count", return_value=25):
                    result2 = await milestone_notifier.check_and_notify(mock_bot)
                    assert result2 is True

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
                assert mock_send.call_count == 2
                assert 10 in milestone_notifier.get_sent_milestones()
                assert 25 in milestone_notifier.get_sent_milestones()

    def test_reset_milestones(self, milestone_notifier):
        """–¢–µ—Å—Ç: —Å–±—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–µ—Ö."""
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ö–∏
        milestone_notifier._sent_milestones.add(10)
        milestone_notifier._sent_milestones.add(25)
        milestone_notifier._sent_milestones.add(50)

        assert len(milestone_notifier.get_sent_milestones()) == 3

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º
        milestone_notifier.reset_milestones()

        assert len(milestone_notifier.get_sent_milestones()) == 0

    def test_get_sent_milestones(self, milestone_notifier):
        """–¢–µ—Å—Ç: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–µ—Ö."""
        milestone_notifier._sent_milestones.add(10)
        milestone_notifier._sent_milestones.add(25)
        milestone_notifier._sent_milestones.add(50)

        sent = milestone_notifier.get_sent_milestones()

        assert 10 in sent
        assert 25 in sent
        assert 50 in sent
        assert len(sent) == 3

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–æ–ø–∏—è, –∞ –Ω–µ –æ—Ä–∏–≥–∏–Ω–∞–ª
        sent.add(75)
        assert 75 not in milestone_notifier.get_sent_milestones()
