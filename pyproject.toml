[tool.poetry]
name = "registration-bot"
version = "1.0.0"
description = "Telegram bot for user registration with survey functionality"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
python-telegram-bot = "21.6"
python-dotenv = "1.0.1"
pandas = "2.2.3"
openpyxl = "3.1.5"
sqlalchemy = "2.0.36"
alembic = "1.14.0"

[tool.poetry.group.dev.dependencies]
pytest-asyncio = "^0.23.0"
pytest-cov = "^6.0.0"
ruff = "0.8.4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120
target-version = "py311"

# Exclude directories
extend-exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".tox",
    ".venv",
    "venv",
    "_build",
    "buck-out",
    "build",
    "dist",
    "migrations",
    "dumps",
    "data",
]

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
# Plus: isort (I), pep8-naming (N), pyupgrade (UP), etc.
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
]

ignore = [
    "E203",  # whitespace before ':' (conflicts with black)
    "E501",  # line too long (handled by line-length)
]

# Allow unused imports in __init__.py files
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"src/models.py" = ["N806", "N807"]  # Allow dynamic class creation naming

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Indent with spaces
indent-style = "space"

# Like Black, respect magic trailing commas
skip-magic-trailing-comma = false


[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"
# Like Black, automatically detect the appropriate line ending
line-ending = "auto"
